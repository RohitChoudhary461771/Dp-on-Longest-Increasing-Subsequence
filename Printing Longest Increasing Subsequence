//ðŸ‘‰Tabulation Algorithm to find LIS and print using another array.
  T.C- O(n*n)+length of LIS
  S.C- O(N+LIS length)

vector<int> printingLongestIncreasingSubsequence(vector<int> arr, int n) {

	vector<int>dp(n,1);// it is used to store the LIS length that is possible for i th index.
	vector<int>hash(n,1);//it is used to store previous index 

	int ans=1;
	int last_ind=0;

	for(int i=0;i<n;i++){
		hash[i]=i;
		for(int prev=0;prev<=i-1;prev++){

			if(arr[prev]<arr[i] && 1+dp[prev]>dp[i]){

				dp[i]=1+dp[prev];
				hash[i]=prev;
			}
		}
		if(dp[i]>ans){
					ans=dp[i];
					last_ind=i;
				}
	}

// cout<<ans<<" "<<last_ind;
//for printing LIS

	vector<int>temp(ans,0);
	int ind=0;
	temp[ind++]=arr[last_ind];
	while(hash[last_ind]!=last_ind){
		last_ind=hash[last_ind];
	temp[ind++]=arr[last_ind];
	}
	reverse(temp.begin(),temp.end());
	return temp;
}
