ðŸ‘‰ Tabulation Algorithm to find length of LIS
  T.C O(n*n+length of LIS)
  S.C O(n+length of LIS)

class Solution {
public:

    vector<int> largestDivisibleSubset(vector<int>& nums) {
        
       int n=nums.size();
  

       sort(begin(nums),end(nums));
        vector<int>dp(n,1);
        vector<int>hash(n,1);
        int ans=1;
        int last_ind=0;
        for(int i=0;i<n;i++){
            hash[i]=i;
            for(int prev=0;prev<=i-1;prev++){
                if(nums[i]%nums[prev]==0 && 1+dp[prev]>dp[i])
                {
                    dp[i]=1+dp[prev];
                    hash[i]=prev;
                }
            }
            if(dp[i]>ans){
                ans=dp[i];
                last_ind=i;
            }
        }
        vector<int>temp;
        int ind=0;
        temp.push_back(nums[last_ind]);

        while(hash[last_ind]!=last_ind){
            last_ind=hash[last_ind];
           temp.push_back(nums[last_ind]);
        }
        return temp;
    }
};
