ðŸŽ¯ We have to only compare the words if it can be formed by adding single character to other word,then rest code is 
   similar to Longest Increasing Subsequence(LIS) Tabulation Algorithm.

Time complexity:O(n*n) + comparing words
Space complexity:O(n)


ðŸ‘‰Write comparator function outside of the class.
   If want to write inside class use static key word,because 
   sort() function takes static function pointer as an argument.



Code:

//ðŸ‘‰comparator for sorting
bool  comp(string& s1, string& s2){
    return s1.size() < s2.size();
}

class Solution {
public:
/*ðŸ‘‰ Two Pointer to check if word1 can be formed 
      using word2 by addition of signle character */

    bool f(string s1,string s2){
        int n1=s1.length();
        int n2=s2.length();
        if(n1!=n2+1)return false;
        int first=0;
        int second=0;
        while(first<n1){
            if(s1[first]==s2[second]){
                first++;
                second++;
            }
            else first++;
        }
        if(first==n1 && second==n2)return true;
        return false;
    }
    
    int longestStrChain(vector<string>& words) {
   
      int n = words.size();
    
    sort(words.begin(), words.end(),comp);

        vector<int>dp(n,1);
        
        int ans=1;
//ðŸ‘‰Tabulation  Algorithm.

        for(int i=0;i<n;i++){
           
            for(int prev=0;prev<=i-1;prev++){
                if(f(words[i],words[prev]) && 1+dp[prev]>dp[i])
                {
                    dp[i]=1+dp[prev];
                   
                }
            }
            if(dp[i]>ans){
                ans=dp[i];
            }
        }
        return ans;
    }
};
