Given an integer array nums, return the length of the longest strictly increasing 
subsequence.

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.


// ðŸ‘‰ memoization

class Solution {
public:

    int f(vector<int>& nums,int n,int i,int prev,vector<vector<int>>&dp)
    {
        if(i==n)return 0;
        if(dp[i][prev+1]!=-1)return dp[i][prev+1];
        dp[i][prev+1]=0+f(nums,n,i+1,prev,dp);
        if(prev==-1 ||nums[i]>nums[prev]){
            dp[i][prev+1]=max(dp[i][prev+1],1+f(nums,n,i+1,i,dp));
        }
        return dp[i][prev+1];
    }
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>>dp(n,vector<int>(n+1,-1));
        return f(nums,n,0,-1,dp);
    }
};
----------------------------------------------------------------------------------------------------------
ðŸ‘‰ Tabulation Algorithm (not tabulation of dp both are different)
        T.C O(n*n)
        S.C O(n)

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {

        int n=nums.size();
        vector<int>dp(n,1);
        for(int i=0;i<n;i++){
            for(int prev=0;prev<i;prev++)
            {
                if(nums[prev]<nums[i]){
                    dp[i]=max(dp[i],1+dp[prev]);
                }
            }
        }
        int ans=1;
        for(int i=0;i<n;i++){
            if(dp[i]>ans){
                ans=dp[i];
            }
        }
        return ans;
    }
};
