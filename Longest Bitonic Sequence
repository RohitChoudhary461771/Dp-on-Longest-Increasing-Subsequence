A bitonic subsequence is a subsequence of an array in which the elements can be any of these three:

First, increase till a point and then decrease.
Goes on increasing (Longest increasing subsequence)
Goes on decreasing (Longest decreasing subsequence)

i/p - 5 
     1 2 1 2 1
o/p- 4

#include <bits/stdc++.h> 

int longestBitonicSequence(vector<int>& arr, int n) {
	vector<int>dp1(n,1);

	for(int i=0;i<n;i++){
		for(int prev=0;prev<=i-1;prev++){
			if(arr[prev]<arr[i]&& 1+dp1[prev]>dp1[i]){
				dp1[i]= 1+dp1[prev];
			}
		}
	}	 
	vector<int>dp2(n,1);
	for(int i=n-1;i>=0;i--){
		for(int prev=n-1;prev>i;prev--){
			if(arr[prev]<arr[i]&& 1+dp2[prev]>dp2[i]){
				dp2[i]=1+dp2[prev];
			}
		}
	}	
	int maxi=1;
	for(int i=0;i<n;i++){
		maxi=max(maxi,dp1[i]+dp2[i]-1);
	}   
	return maxi;
} 
